#!/usr/bin/env python3

# Copyright Â© 2017-2018 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import collections
import configparser
import os
import shutil
import urllib.parse

lambda: (yield from 0)  # Python >= 3.3 is required

def open_in_browser(url):
    for cmd in 'sensible-browser', 'xdg-open':
        if shutil.which(cmd):
            break
    try:
        os.execvp(cmd, [cmd, url])
    except FileNotFoundError as exc:
        exc.filename = cmd
        raise

def main():
    cp = configparser.ConfigParser(interpolation=None, default_section='')
    this = os.path.realpath(__file__)
    here = os.path.dirname(this)
    path = os.path.join(here, 'config')
    cp.read(path, encoding='ASCII')
    sites = cp['sites']
    aliases = cp['aliases']
    rev_aliases = collections.defaultdict(set)
    for alias in aliases:
        site = aliases[alias]
        rev_aliases[site].add(alias)
    ap = argparse.ArgumentParser()
    all_sites = set(sites) | set(aliases)
    sites_help = []
    for site in sorted(sites):
        site_help = site
        if site in rev_aliases:
            site_aliases = sorted(rev_aliases[site])
            site_help += ' ({0})'.format(', '.join(site_aliases))
        sites_help += [site_help]
    sites_help = ' | '.join(sites_help)
    ap.add_argument('-l', '--lang', default='en')
    ap.add_argument('site', metavar='SITE', choices=all_sites, help=sites_help)
    ap.add_argument('args', metavar='ARG', nargs='+')
    options = ap.parse_args()
    site = options.site
    try:
        site = aliases[options.site]
    except KeyError:
        pass
    url_template = sites[site]
    variables = dict(
        args=' '.join(options.args),
        lang=options.lang
    )
    variables = dict(
        (k, urllib.parse.quote(v))
        for k, v in variables.items()
    )
    url = url_template.format(**variables)
    open_in_browser(url)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
